<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 猩球科技</title>
    <link>http://wikke.github.io/posts/</link>
    <description>Recent content in Posts on 猩球科技</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 17 Mar 2021 19:33:21 +0800</lastBuildDate><atom:link href="http://wikke.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用Hugo&#43;Markdown创建个人博客，部署在Github/Gitee</title>
      <link>http://wikke.github.io/posts/2.blog-with-hugo/</link>
      <pubDate>Wed, 17 Mar 2021 19:33:21 +0800</pubDate>
      
      <guid>http://wikke.github.io/posts/2.blog-with-hugo/</guid>
      <description>安装 ➜ ~ brew install hugo ... ➜ ~ hugo version Hugo Static Site Generator v0.80.0/extended darwin/amd64 BuildDate: unknown 初始化 运行hugo new site &amp;lt;your-blog-name&amp;gt;初始化一个hugo工程
➜ ~ hugo new site blogs Congratulations! Your new Hugo site is created in /Users/wikke/blogs. Just a few more steps and you&amp;#39;re ready to go: 1. Download a theme into the same-named folder. Choose a theme from https://themes.gohugo.io/ or create your own with the &amp;#34;hugo new theme &amp;lt;THEMENAME&amp;gt;&amp;#34; command.</description>
    </item>
    
    <item>
      <title>使用Loguru，优雅记录Python日志</title>
      <link>http://wikke.github.io/posts/loguru/</link>
      <pubDate>Wed, 17 Mar 2021 17:33:01 +0800</pubDate>
      
      <guid>http://wikke.github.io/posts/loguru/</guid>
      <description>你还在使用print来调试代码，记录“日志”？
或者使用python的logging模块getLogger,setLevel?
告诉你，都不用，赶紧使用loguru来记录日志吧
安装 pip install loguru 就是这么简单！
快速上手 loguru的核心理念是，你需要且只需要一个logger
日志输出API 非常简单易懂
from loguru import logger logger.debug(&amp;#34;Happy logging with Loguru!&amp;#34;) debug, warning,error也都一应俱全
logger.debug(&amp;#34;Debug message!&amp;#34;) logger.warning(&amp;#34;I am warning you!&amp;#34;) logger.error(&amp;#34;Ahh, Error occues~&amp;#34;) 定制化 调用add方法增加handler时可以做定制，比如colorize设置为True表示输出颜色，而format参数代表日志输出的内容格式
import sys logger.add(sys.stdout, colorize=True, format=&amp;#34;&amp;lt;green&amp;gt;{time:YYYY-MM-DD at HH:mm:ss}&amp;lt;/green&amp;gt; | &amp;lt;level&amp;gt;{message}&amp;lt;/level&amp;gt;&amp;#34;) 日志文件   logger.add(&#39;log-{time}.log&#39;, encoding=&amp;quot;utf-8&amp;quot;)会给日志文件名自动增加时间信息以区分，比如log-2021-03-15_23-36-51_241786.log，encoding参数设置保存为UTF-8编码
  logger.add(&#39;log-{time}.log&#39;, rotation=&amp;quot;500MB&amp;quot;)会在超过500M时，自动创建新的日志文件
  logger.add(&#39;log-{time}.log&#39;, rotation=&amp;quot;00:00&amp;quot;)会在每天00:00自动创建新的日志文件
  logger.add(&#39;log-{time}.log&#39;, compression=&amp;quot;zip&amp;quot;)会以zip文件保存日志，节省磁盘空间
  这些参数当然可以组合使用，比如
logger.add(&amp;#39;log-{time}.log&amp;#39;, encoding=&amp;#34;utf-8&amp;#34;, rotation=&amp;#34;00:00&amp;#34;, compression=&amp;#34;zip&amp;#34;) 字符串format 日志内容的format和str.format()用法类似
可以使用最新的f-string方式，代替%做内容format
person = {&amp;#39;name&amp;#39;: &amp;#39;Alice&amp;#39;, &amp;#39;age&amp;#39;: 12} logger.</description>
    </item>
    
  </channel>
</rss>
